version: "3.9"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    ports:
        - ${ZOOKEEPER_PORT:-env.ZOOKEEPER_PORT}:2181
    environment:
      ZOOKEEPER_SERVER_ID: ${ZOOKEEPER_SERVER_ID:-env.ZOOKEEPER_SERVER_ID}
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT:-env.ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME:-env.ZOOKEEPER_TICK_TIME}
    volumes: 
      - ./volumenes/zookeeper:/var/lib/kafka/data
    networks: 
      - broker-kafka

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka1
    hostname: kafka1
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      EXTRA_ARGS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.12.0.jar=7071:/usr/share/jmx_exporter/prom-jmx-agent-config.yml
    volumes:
      - ./config:/usr/share/jmx_exporter/
      - ./volumenes/kafka1:/var/lib/kafka/data
    networks: 
      - broker-kafka
      
  kafka2:
      image: confluentinc/cp-kafka:7.3.2
      container_name: kafka2
      hostname: kafka2
      restart: always
      depends_on:
        - zookeeper
      ports:
        - "9093:9093"
      environment:
        KAFKA_BROKER_ID: 2
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
        KAFKA_LISTENERS: PLAINTEXT://kafka2:9093
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_DELETE_TOPIC_ENABLE: true
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        EXTRA_ARGS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.12.0.jar=7072:/usr/share/jmx_exporter/prom-jmx-agent-config.yml
      volumes:
        - ./config:/usr/share/jmx_exporter/
        - ./volumenes/kafka2:/var/lib/kafka/data
      networks: 
        - broker-kafka
  
  kafka3:
      image: confluentinc/cp-kafka:7.3.2
      container_name: kafka3
      hostname: kafka3
      restart: always
      depends_on:
        - zookeeper
      ports:
        - "9094:9094"
      environment:
        KAFKA_BROKER_ID: 3
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
        KAFKA_LISTENERS: PLAINTEXT://kafka3:9094
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_DELETE_TOPIC_ENABLE: true
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        EXTRA_ARGS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.12.0.jar=7073:/usr/share/jmx_exporter/prom-jmx-agent-config.yml
      volumes:
        - ./config:/usr/share/jmx_exporter/
        - ./volumenes/kafka3:/var/lib/kafka/data
      networks: 
        - broker-kafka

  prometheus:
   image: prom/prometheus
   container_name: prometheus
   hostname: prometheus
   restart: always
   ports:
      - ${PROMETHEUS_PORT:-env.PROMETHEUS_PORT}:9090
   volumes:
     - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
   networks: 
     - broker-kafka

  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    restart: always
    ports:
        - ${GF_SERVER_PORT:-env.GF_SERVER_PORT}:3000
    links:
      - prometheus
    environment:
        GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-env.GF_SECURITY_ADMIN_USER}
        GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-env.GF_SECURITY_ADMIN_PASSWORD}
    volumes:
     - ./volumenes/grafana:/var/lib/grafana
    networks: 
      - broker-kafka

  conduktor-platform:
    image: conduktor/conduktor-platform:latest
    container_name: conduktor-platform
    hostname: conduktor-platform
    restart: always
    ports:
      - "8080:8080"
    environment:
      CDK_ORGANIZATION_NAME: ${CDK_ORGANIZATION_NAME:-env.CDK_ORGANIZATION_NAME}
      CDK_ADMIN_EMAIL: ${CDK_ADMIN_EMAIL:-env.CDK_ADMIN_EMAIL}
      CDK_ADMIN_PASSWORD: ${CDK_ADMIN_PASSWORD:-env.CDK_ADMIN_PASSWORD}
      CDK_DATABASE_URL: "postgresql://${POSTGRES_USER:-env.POSTGRES_USER}:${POSTGRES_PASSWORD:-env.POSTGRES_PASSWORD}@postgresql:${POSTGRES_PORT:-env.POSTGRES_PORT}/${POSTGRES_DB:-env.POSTGRES_DB}"
      CDK_CLUSTERS_0_ID: ${CDK_CLUSTERS_0_ID:-env.CDK_CLUSTERS_0_ID}
      CDK_CLUSTERS_0_NAME: ${CDK_CLUSTERS_0_NAME:-env.CDK_CLUSTERS_0_NAME}
      CDK_CLUSTERS_0_COLOR: "#0013E7"
      CDK_CLUSTERS_0_BOOTSTRAPSERVERS: 'PLAINTEXT://kafka1:9092,PLAINTEXT://kafka2:9093,PLAINTEXT://kafka3:9094'
    volumes:
      - ./volumenes/conduktor:/var/conduktor
    networks: 
        - broker-kafka

  postgresql:
    image: postgres:14
    container_name: postgresql
    hostname: postgresql
    restart: always
    ports:
      - ${POSTGRES_PORT:-env.POSTGRES_PORT}:5432
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-env.POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER:-env.POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-env.POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    volumes:
      - ./volumenes/pg_data:/var/lib/postgresql/data
    networks: 
      - broker-kafka

networks: 
    broker-kafka:
      driver: bridge 

volumes:
    zookeeper: {}
    kafka1: {}
    kafka2: {}
    kafka3: {}
    pg_data: {}
    conduktor_data: {}